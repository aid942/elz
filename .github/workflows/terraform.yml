# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file

# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run

# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events

# to the "main" branch, `terraform apply` will be executed.

#

# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

#

# To use this workflow, you will need to complete the following setup steps.

#

# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.

#   Example `main.tf`:

#     # The configuration for the `remote` backend.

#     terraform {

#       backend "remote" {

#         # The name of your Terraform Cloud organization.

#         organization = "example-organization"

#

#         # The name of the Terraform Cloud workspace to store Terraform state files in.

#         workspaces {

#           name = "example-workspace"

#         }

#       }

#     }

#

#     # An example resource that does nothing.

#     resource "null_resource" "example" {

#       triggers = {

#         value = "A example resource that does nothing!"

#       }

#     }

#

#

# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.

#   Documentation:

#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html

#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets

#

# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.

#   Example:

#     - name: Setup Terraform

#       uses: hashicorp/setup-terraform@v1

#       with:

#         cli_config_credentials_token:

 

name: 'Terraform'
on:
  push:
    branches: [ "main" ]
  pull_request:

 

permissions:

  contents: read

 

jobs:

  terraform:

    name: 'Terraform'

    runs-on: ubuntu-latest

    environment: production

 

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

    defaults:

      run:

        shell: bash

 

    steps:

    # Checkout the repository to the GitHub Actions runner

    - name: Checkout

      uses: actions/checkout@v4

    - name: Azure Login
      run: |
        az login --service-principal \
          -u ${{ secrets.ARM_CLIENT_ID }} \
          -p ${{ secrets.ARM_CLIENT_SECRET }} \
          --tenant ${{ secrets.ARM_TENANT_ID }}
        az account set --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}

    # Install Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform init

    # Generate Terraform Plan
    - name: Terraform Plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform plan -input=false

    # Apply Terraform Configuration
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve -input=false